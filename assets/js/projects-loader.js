/**
 * PROJECTS LOADER
 * ===============
 * This JavaScript file automatically loads project data from a JSON file
 * and creates interactive project cards on the Projects page.
 *
 * HOW IT WORKS:
 * 1. When the page loads, fetch /assets/data/projects.json
 * 2. For each project in the JSON, create a clickable card with image and text
 * 3. If loading fails, show a helpful error message
 *
 * The JSON file is generated by running: npm run build:projects
 */

// Wait for the HTML page to fully load before running our code
document.addEventListener('DOMContentLoaded', function() {
  // Find the container where we'll add the project cards
  const projectsGrid = document.getElementById('projects-grid');

  // If we can't find the grid container, stop here
  if (!projectsGrid) {
    console.error('Projects grid container not found');
    return;
  }

  /**
   * FUNCTION: Create a single project card element
   * Takes project data and returns a complete HTML element
   */
  function createProjectCard(project) {
    // Create the main card link (the entire card is clickable)
    const cardLink = document.createElement('a');
    cardLink.className = 'project-card'; // CSS class for styling
    cardLink.href = project.href; // Where the link goes when clicked
    cardLink.setAttribute('aria-label', `Open ${project.title}`); // Screen reader description

    // Create the image container
    const figure = document.createElement('figure');
    figure.className = 'project-thumb';

    // Create the actual image
    const img = document.createElement('img');
    img.src = project.thumbnail; // Image file path
    img.alt = `Thumbnail for ${project.title}`; // Screen reader description
    img.loading = 'lazy'; // Only load image when it's about to be visible (saves bandwidth)
    img.decoding = 'async'; // Improves page performance

    // Add the image to the figure container
    figure.appendChild(img);

    // Create the text information container
    const metaDiv = document.createElement('div');
    metaDiv.className = 'project-meta';

    // Create the project title
    const title = document.createElement('h3');
    title.className = 'project-title';
    title.textContent = project.title; // The project name

    // Create the project description
    const description = document.createElement('p');
    description.className = 'project-desc';
    description.textContent = project.description; // The project description

    // Add title and description to the meta container
    metaDiv.appendChild(title);
    metaDiv.appendChild(description);

    // Add both the image and text to the main card
    cardLink.appendChild(figure);
    cardLink.appendChild(metaDiv);

    return cardLink;
  }

  /**
   * FUNCTION: Display an error message when projects can't be loaded
   */
  function showErrorMessage() {
    // Create a helpful error message container
    const errorDiv = document.createElement('div');
    errorDiv.className = 'projects-error';
    errorDiv.style.textAlign = 'center';
    errorDiv.style.padding = '2rem';
    errorDiv.style.color = 'var(--leaf-dark)';

    // Create the error message content
    errorDiv.innerHTML = `
      <h3 style="margin-bottom: 1rem; color: var(--berry);">No Projects Found</h3>
      <p style="margin-bottom: 1rem;">The projects data couldn't be loaded.</p>
      <p style="font-size: 0.9rem; opacity: 0.8;">
        To fix this, run the build script: <code style="background: var(--sand); padding: 0.2rem 0.5rem; border-radius: 4px;">npm run build:projects</code>
      </p>
    `;

    // Add the error message to the grid
    projectsGrid.appendChild(errorDiv);
  }

  /**
   * FUNCTION: Load and display all projects
   */
  async function loadProjects() {
    try {
      // Show a loading message while we fetch the data
      projectsGrid.innerHTML = '<p style="text-align: center; color: var(--leaf-dark); opacity: 0.7;">Loading projects...</p>';

      // Fetch the JSON data from the server
      // fetch() is a modern way to request data from a URL
      const response = await fetch('/assets/data/projects.json');

      // Check if the request was successful
      if (!response.ok) {
        throw new Error(`Failed to load projects: ${response.status} ${response.statusText}`);
      }

      // Convert the response to JavaScript object format
      const projects = await response.json();

      // Clear the loading message
      projectsGrid.innerHTML = '';

      // Check if we actually have any projects
      if (!projects || projects.length === 0) {
        showErrorMessage();
        return;
      }

      // Create a card for each project and add it to the grid
      projects.forEach(project => {
        const card = createProjectCard(project);
        projectsGrid.appendChild(card);
      });

      console.log(`âœ… Loaded ${projects.length} projects successfully`);

    } catch (error) {
      // If anything goes wrong, show an error message
      console.error('Error loading projects:', error);
      projectsGrid.innerHTML = '';
      showErrorMessage();
    }
  }

  // Start loading the projects when the script runs
  loadProjects();
});
